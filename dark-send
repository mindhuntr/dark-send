#!/usr/bin/env python3

from telethon.tl.types import DocumentAttributeVideo,InputMessagesFilterPhotos, MessageMediaDocument, MessageMediaPhoto
from telethon.tl.functions.channels import GetForumTopicsByIDRequest, GetForumTopicsRequest
from meta_data import meta_extract, extract_thumb
from telethon.sessions import StringSession 
from telethon import TelegramClient, utils
from telethon.tl.patched import Message
from FastTelethon import upload_file 
from argparse import ArgumentParser 
from inquirer import display_list
import progress_bar, mimetypes
from datetime import datetime
from telethon.tl import types 
from datetime import datetime 
from time import sleep
from os import path
import config, sys

""" Get api id and hash from https://my.telegram.org """ 

async def main(): 
    
    parser = ArgumentParser(description='command line telegram client') 
    parser.add_argument('message', type=str,help="the message you would like to send",nargs="*") 
    parser.add_argument('-v','--video',type=str,nargs="+",help="videos to send") 
    parser.add_argument('-i','--image',type=str,nargs="+",help="images to send") 
    parser.add_argument('-f','--file',type=str,nargs="+",help="files to send")
    parser.add_argument('-p','--compressed',type=str,nargs="+",help="send files as compressed (both images and videos)" ) 
    parser.add_argument('-n','--nchats',type=int,nargs="?",default=40,help="no chats to display") 
    parser.add_argument('-c','--chats',type=str,nargs="*",help="name of the chat") 
    parser.add_argument('-t','--caption',type=str,nargs="*",help="caption for file")
    parser.add_argument('-a','--album',action="store_true",help="send files as albums") 
    parser.add_argument('-q','--quiet',action="store_true",help="suppress progress bar") 
    parser.add_argument('-tl','--thumbnail',type=str, nargs="?", help="custom thumbnail for video") 
    parser.add_argument('--download-images',action="store_true",help="download photos from selected chats") 
    parser.add_argument('--download-media',type=int,nargs="+",help="download selected media from chats (use message id)") 

    chats = [] 
    chat_list = {}
    mimetypes.init()
    args = parser.parse_args() 

    if len(sys.argv) == 1:
        parser.print_help()
        exit()

    async for dialog in client.iter_dialogs(args.nchats): 
        if not hasattr(dialog.entity, "forum"): 
            chat_list[dialog.name] = dialog.id
        else: 
            if dialog.entity.forum: 
                topic_obj = await client(GetForumTopicsRequest(channel=dialog.id,offset_date=datetime.now(),offset_id=1, offset_topic=1,limit=100))
                topics = [ {topic.title: topic.id} for topic in topic_obj.topics ]
                chat_list[dialog.name] = [ dialog.id, topics ]
            else: 
                chat_list[dialog.name] = dialog.id
    
    if not args.caption:
        args.caption = [ None ]

    if not chats:
        chats = await display_list(args.nchats,args.chats,chat_list) # Display chat list 

    ## Send Message 

    if args.message:
        if chats:
            for message in args.message: 
                for chat in chats:
                    await client.send_message(chat[0],message,reply_to=chat[1]) # Send message to selected chats

    ## Send Videos 
    
    if args.video:
        if chats:
            for video in args.video: 
                if path.exists(video):
                    height, width, duration = meta_extract(video) # Extract metadata for video
                    thumb = extract_thumb(args.thumbnail, video) 
                    for chat in chats:
                        if not args.quiet:
                            video_handle = await client.upload_file(video,progress_callback=progress_bar.progress,part_size_kb=512) # Upload video with progress 
                            await client.send_file(chat[0],video_handle,video=True,attributes=(DocumentAttributeVideo(duration,width,height,supports_streaming=True),),caption=args.caption[0],thumb=thumb,reply_to=chat[1]) # Send the video
                        else:
                            video_handle = await client.upload_file(video,part_size_kb=512) # Upload video without progress 
                            await client.send_file(chat[0],video_handle,video=True,attributes=(DocumentAttributeVideo(duration,width,height,supports_streaming=True),),caption=args.caption[0], reply_to=chat[1]) 
                else:
                    print("{} doesnt exist".format(video)) 

    ## Send both videos and images as compressed 

    if args.compressed: 
        if chats:
            for comps in args.compressed: 
                if path.exists(comps):
                    mime_out = mimetypes.guess_type(comps)[0] 
                    if mime_out and mime_out.split('/')[0] == "image": # Check if image 
                        for chat in chats:
                            if not args.quiet:
                                image_handle = await client.upload_file(comps,progress_callback=progress_bar.progress,part_size_kb=512)
                            else:
                                image_handle = await client.upload_file(comps,part_size_kb=512)

                            await client.send_file(chat[0],image_handle,image=True, reply_to=chat[1]) 

                    if mime_out and mime_out.split('/')[0] == "video": # Check if video 
                            height, width, duration = meta_extract(comps)  # Extract metadata 
                            for chat in chats:
                                if not args.quiet:
                                    video_handle = await client.upload_file(comps,progress_callback=progress_bar.progress,part_size_kb=512)
                                else:
                                    video_handle = await client.upload_file(comps,part_size_kb=512)
                                await client.send_file(chat[0],video_handle,video=True,attributes=(DocumentAttributeVideo(duration,width,height,supports_streaming=True),),reply_to=chat[1]) 

                else:
                    print("{} doesnt exist".format(comps)) 

    ## Send Images 

    if args.image:
        if not args.album:
            if chats:
                for image in args.image:
                    if path.exists(image):
                        for chat in chats:
                            if not args.quiet:
                                # image_handle = await client.upload_file(image,progress_callback=progress_bar.progress,part_size_kb=512)
                                await client.send_file(chat[0],image,image=True,progress_callback=progress_bar.progress,part_size_kb=512,caption=args.caption[0],reply_to=chat[1]) 
                            else:
                                # image_handle = await client.upload_file(image,part_size_kb=512)
                                await client.send_file(chat[0],image,image=True,part_size_kb=512,caption=args.caption[0],replay_to=chat[1]) 
                    else:
                        print("{} doesnt exist".format(image)) 
        else:                                                           # Send images as an album 
            if chats:
                for chat in chats:
                    if not args.quiet:
                        await client.send_file(chat[0],args.image,progress_callback=progress_bar.progress,part_size_kb=512,image=True,caption=args.caption,reply_to=chat[1])
                    else: 
                        await client.send_file(chat[0],args.image,part_size_kb=512,image=True,caption=args.caption,reply_to=chat[1])

    ## Send files 
    if args.file:
        if not args.album:
            if chats:
                for file in args.file:
                    if path.exists(file):
                        with open(file, 'rb') as f_obj: 
                            if not args.quiet:
                                res = await upload_file(client, f_obj, progress_callback=progress_bar.progress) 
                            else: 
                                res = await upload_file(client, f_obj) 

                            attributes, mime_type = utils.get_attributes(
                                file,
                            )
                            media = types.InputMediaUploadedDocument(
                                file=res,
                                mime_type=mime_type,
                                attributes=attributes,
                                force_file=True
                            )
                        for chat in chats:
                                await client.send_file(chat[0],media,caption=args.caption[0],reply_to=chat[1]) 
                    else:
                        print("{} doesnt exist".format(file)) 

        else: 
            files_to_upload = []
            if chats:
                for file in args.file:
                    if path.exists(file):
                        files_to_upload.append(file) 
                    else:
                        print("{} doesnt exist".format(file)) 

                if files_to_upload:
                    for chat in chats:
                        if not args.quiet:
                            await client.send_file(chat[0],files_to_upload,force_document=True,progress_callback=progress_bar.progress,part_size_kb=512,caption=args.caption,reply_to=chat[1]) 
                        else: 
                            await client.send_file(chat[0],files_to_upload,force_document=True,part_size_kb=512,caption=args.caption,reply_to=chat[1]) 
                            
    if args.download_images: 
        if chats:
            for chat in chats: 
                async for message in client.iter_messages(chat,filter=InputMessagesFilterPhotos):
                    now = datetime.now() 
                    current_time = now.strftime("%Y_%m_%d_%H_%M_%S")

                    file_name = "image_" + current_time + ".jpg" 
                    with open(file_name,'wb') as file:
                        await client.download_media(message,file,progress_callback=progress_bar.progress) 

    if args.download_media: 
        if chats:
            for chat in chats: 
                async for message in client.iter_messages(chat): 
                    if (not args.download_media) or (min(args.download_media) > message.id): 
                        break 
                    if message.id in args.download_media: 
                        try:
                            if message.media.document.mime_type: 
                                tp, _ = message.media.document.mime_type.split('/')
                                if tp == "application": 
                                    file_name = message.file.name
                                    with open(file_name,'wb') as file:
                                        await client.download_media(message,file,progress_callback=progress_bar.progress) 

                                elif tp == "video": 
                                    now = datetime.now() 
                                    current_time = now.strftime("%Y_%m_%d_%H_%M_%S")

                                    file_name = "video_" + current_time + ".mp4" 
                                    with open(file_name,'wb') as file:
                                        await client.download_media(message,file,progress_callback=progress_bar.progress) 

                        except AttributeError: 
                            if hasattr(message.media,'photo'): 
                                now = datetime.now() 
                                current_time = now.strftime("%Y_%m_%d_%H_%M_%S")

                                file_name = "image_" + current_time + ".jpg" 
                                with open(file_name,'wb') as file:
                                    await client.download_media(message,file,progress_callback=progress_bar.progress) 
                            else: 
                                continue 
                            
                        args.download_media.remove(message.id) 

#     if args.clone: 
#         chats = await display_list(args.nchats,args.chats,chat_list) # Display chat list  
#         dest_chat = await display_list(args.nchats,args.chats,chat_list) # Display chat list  
#         album = []
# 
#         for chat in chats: 
#             async for message in client.iter_messages(chat,min_id=14171,reverse=True): 
#                 if type(message) is Message:
#                     if type(message.media) is MessageMediaPhoto:
#                         if album: 
#                             await client.forward_messages(dest_chat[0], album, drop_author=True) 
#                             sleep(1) 
#                             album = []
#                         await client.send_message(dest_chat[0], message) 
# 
#                     if type(message.media) is MessageMediaDocument: 
#                         album.append(message) 


if __name__ == "__main__":

    if path.exists(config.fullpath):

        config.parser.read(config.fullpath) 
        api_id = int(config.parser.get('dark-send','api_id'))
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    else:
        config.generate_conf() 
        config.parser.read(config.fullpath) 
        api_id = int(config.parser.get('dark-send','api_id'))
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    client = TelegramClient(StringSession(string), api_id, api_hash) 

    with client:
        client.loop.run_until_complete(main())

