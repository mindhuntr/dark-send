#!/usr/bin/python3 

from telethon import TelegramClient 
from telethon.tl.types import DocumentAttributeVideo
from inquirer import style,display_list
from telethon.sessions import StringSession 
from meta_data import meta_extract
from os import path 
from argparse import ArgumentParser 
import config 
import progress_bar 

""" Get api id and hash from https://my.telegram.org """ 

async def main(): 

    parser = ArgumentParser(description='command line telegram client') 
    parser.add_argument('message', type=str,help="the message you would like to send",nargs="*") 
    parser.add_argument('-v','--video',type=str,nargs="+") 
    parser.add_argument('-i','--image',type=str,nargs="+") 
    parser.add_argument('-f','--file',type=str,nargs="+") 
    parser.add_argument('-n','--nchats',type=int,nargs="?",default=20,help="no chats to display") 
    parser.add_argument('-c','--chats',type=str,nargs="*",help="name of the chat") 
    parser.add_argument('-a','--album',action="store_true",help="send files as albums") 
    parser.add_argument('-q','--quiet',action="store_true",help="suppress progress bar") 

    chats = [] 
    args = parser.parse_args() 

    if not chats:
        chat_list = { 
                dialog.name:dialog.id async for dialog in client.iter_dialogs(args.nchats)
                }

    if args.message:
        if not chats:
            chats = await display_list(args.nchats,args.chats,chat_list)  
        for message in args.message: 
            for chat in chats:
                await client.send_message(chat,message)

    if args.video:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list)  
            for video in args.video: 
                if path.exists(video):
                    height, width, duration = meta_extract(video) 
                    for chat in chats:
                        if not args.quiet:
                            video_handle = await client.upload_file(video,progress_callback=progress_bar.progress,part_size_kb=512)
                            await client.send_file(chat,video_handle,video=True,attributes=(DocumentAttributeVideo(duration,width,height,supports_streaming=True),)) 
                        else:
                            video_handle = await client.upload_file(video,part_size_kb=512)
                            await client.send_file(chat,video_handle,video=True,attributes=(DocumentAttributeVideo(duration,width,height,supports_streaming=True),)) 
                else:
                    print("{} doesnt exist".format(video)) 

        else:
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list) 
            files_uploaded = []
             
            if chats:
                for file in args.video:
                    if path.exists(file):
                        if not args.quiet:
                            files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                        else:
                            files_uploaded.append(await client.upload_file(file,part_size_kb=512))
                    else:
                        print("{} doesnt exist".format(file)) 
                
                if files_uploaded:
                    for chat in chats:
                        await client.send_file(chat,files_uploaded,video=True,supports_streaming=True)


    if args.image:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list) 
            for image in args.image:
                if path.exists(image):
                    for chat in chats:
                        if not args.quiet:
                            image_handle = await client.upload_file(image,progress_callback=progress_bar.progress,part_size_kb=512)
                            await client.send_file(chat,image_handle,image=True) 
                        else:
                            image_handle = await client.upload_file(image,part_size_kb=512)
                            await client.send_file(chat,image_handle,image=True) 
                else:
                    print("{} doesnt exist".format(image)) 

        else:
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list) 
            files_uploaded = []
            
            if chats:
                for file in args.image:
                    if path.exists(file):
                        if not args.quiet:
                            files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                        else:
                            files_uploaded.append(await client.upload_file(file,part_size_kb=512))
                    else:
                        print("{} doesnt exist".format(file))

                if files_uploaded:
                    for chat in chats:
                        await client.send_file(chat,files_uploaded,image=True)


    if args.file:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list) 
            for file in args.file:
                if path.exists(file):
                    for chat in chats:
                        if not args.quiet:
                            file_handle = await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512)
                            await client.send_file(chat,file_handle,force_document=True) 
                        else:
                            file_handle = await client.upload_file(file,part_size_kb=512)
                            await client.send_file(chat,file_handle,force_document=True) 
                else:
                    print("{} doesnt exist".format(file)) 

        else: 
            if not chats:
                chats = await display_list(args.nchats,args.chats,chat_list) 
            files_uploaded = []
            
            if chats:
                for file in args.file:
                    if path.exists(file):
                        if not args.quiet:
                            files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                        else:
                            files_uploaded.append(await client.upload_file(file,part_size_kb=512))
                    else:
                        print("{} doesnt exist".format(file)) 
                
                if files_uploaded:
                    for chat in chats:
                        await client.send_file(chat,files_uploaded,force_document=True)

if __name__ == "__main__":

    if path.exists(config.fullpath):

        config.parser.read(config.fullpath) 
        api_id = config.parser.get('dark-send','api_id') 
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    else:
        config.generate_conf() 
        config.parser.read(config.fullpath) 
        api_id = config.parser.get('dark-send','api_id') 
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    client = TelegramClient(StringSession(string), api_id, api_hash) 

    with client:
        client.loop.run_until_complete(main())
