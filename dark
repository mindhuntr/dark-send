#!/usr/bin/python3 

from telethon import TelegramClient 
import sys 
import os 
import argparse
import inquirer
from telethon.sessions import StringSession 
import config 
import progress_bar 
import ctypes

""" Get api id and hash from https://my.telegram.org """ 

async def display_list(no_chats,chats):

    if not no_chats:
        no_chats = 15

    global client 
    id = {}
    async for dialog in client.iter_dialogs(no_chats):
        id[dialog.name] = dialog.id

    if chats:
        peers = []
        for chat in chats:
            try:
                peers.append(id[chat])
            except:
                pass

        return peers

    dist = []
    for key in id.keys():
        tmp = {}
        tmp['name'] = key
        dist.append(tmp)

    questions = [
    {
    'type': 'checkbox',
    'message': 'Select chat',
    'name': 'Chats',
    'choices': dist,
    'validate': lambda answer: 'Choose atleast one chat' \
            if len(answer) == 0 else True
            }
    ]

    answers = inquirer.prompt(questions,style=inquirer.style)
    peers = []

    if answers:
        for val in answers.values():
            for answer in val:
                peers.append(id[answer]) 

            return peers
    else:
        exit(1) 

          
async def main(): 

    parser = argparse.ArgumentParser(description='command line telegram client') 
    parser.add_argument('message', type=str,help="the message you would like to send",nargs="*") 
    parser.add_argument('-v','--video',type=str,nargs="+") 
    parser.add_argument('-i','--image',type=str,nargs="+") 
    parser.add_argument('-f','--file',type=str,nargs="+") 
    parser.add_argument('-n','--nchats',type=int,nargs="?",help="no chats to display") 
    parser.add_argument('-c','--chats',type=str,nargs="*",help="name of the chat") 
    parser.add_argument('-a','--album',action="store_true",help="send files as albums") 
    parser.add_argument('-q','--quiet',action="store_true",help="suppress progress bar") 

    chats = [] 
    args = parser.parse_args() 
    if args.message:
        if not chats:
            chats = await display_list(args.nchats,args.chats)  
        for message in args.message: 
            for chat in chats:
                await client.send_message(chat,message)

    if args.video:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats)  
            for video in args.video: 
                for chat in chats:
                    if not args.quiet:
                        video_handle = await client.upload_file(video,progress_callback=progress_bar.progress,part_size_kb=512)
                        await client.send_file(chat,video_handle,video=True) 
                    else:
                        video_handle = await client.upload_file(video,part_size_kb=512)
                        await client.send_file(chat,video_handle,video=True) 

        else:
            if not chats:
                chats = await display_list(args.nchats,args.chats) 
            files_uploaded = []
            
            if chats:
                for file in args.video:
                    if not args.quiet:
                        files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                    else:
                        files_uploaded.append(await client.upload_file(file,part_size_kb=512))

                for chat in chats:
                    await client.send_file(chat,files_uploaded,video=True)


    if args.image:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats) 
            for image in args.image:
                for chat in chats:
                    if not args.quiet:

                        image_handle = await client.upload_file(image,progress_callback=progress_bar.progress,part_size_kb=512)
                        await client.send_file(chat,image_handle,image=True) 
                    else:
                        image_handle = await client.upload_file(image,part_size_kb=512)
                        await client.send_file(chat,image_handle,image=True) 

        else:
            if not chats:
                chats = await display_list(args.nchats,args.chats) 
            files_uploaded = []
            
            if chats:
                for file in args.image:
                    if not args.quiet:
                        files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                    else:
                        files_uploaded.append(await client.upload_file(file,part_size_kb=512))

                for chat in chats:
                    await client.send_file(chat,files_uploaded,image=True)


    if args.file:
        if not args.album:
            if not chats:
                chats = await display_list(args.nchats,args.chats) 
            for file in args.file:
                for chat in chats:
                    if not args.quiet:
                        file_handle = await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512)
                        await client.send_file(chat,file_handle,force_document=True) 
                    else:
                        file_handle = await client.upload_file(file,part_size_kb=512)
                        await client.send_file(chat,file_handle,force_document=True) 

        else: 
            if not chats:
                chats = await display_list(args.nchats,args.chats) 
            files_uploaded = []
            
            if chats:
                for file in args.file:
                    if not args.quiet:
                        files_uploaded.append(await client.upload_file(file,progress_callback=progress_bar.progress,part_size_kb=512))
                    else:
                        files_uploaded.append(await client.upload_file(file,part_size_kb=512))

                for chat in chats:
                    await client.send_file(chat,files_uploaded,force_document=True)

if __name__ == "__main__":

    if os.path.exists(config.fullpath):

        config.parser.read(config.fullpath) 
        api_id = config.parser.get('dark-send','api_id') 
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    else:
        config.generate_conf() 
        config.parser.read(config.fullpath) 
        api_id = config.parser.get('dark-send','api_id') 
        api_hash = config.parser.get('dark-send','api_hash') 
        string = config.parser.get('dark-send','string_session') 

    client = TelegramClient(StringSession(string), api_id, api_hash) 

    with client:
        client.loop.run_until_complete(main())
